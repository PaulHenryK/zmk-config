/*
 * Copyright (c) 2020 The ZMK Contributors
 * PHK
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h> 

/ {
    combos {
        compatible = "zmk,combos";
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <12 17>;
            bindings = <&kp TAB>;
        };
        
        
        combo_minus {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp MINUS>;
        };
        
        combo_under {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp UNDER>;
        };
        
        combo_equal {
            timeout-ms = <50>;
            key-positions = <3 6>;
            bindings = <&kp EQUAL>;
        };
        
        combo_sqt {
            timeout-ms = <50>;
            key-positions = <11 18>;
            bindings = <&kp SQT>;
        };
        
        hm_llalt {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LALT>;
        };
        
        hm_llgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        hm_llctrl {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LCTRL>;
        };
        
        hm_rlgui {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LGUI>;
        };
        
        hm_rlalt {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LALT>;
        };
        
        hm_rlctrl {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LCTRL>;
        };
        
    };
};

/ {

keymap {
                compatible = "zmk,keymap";

                default_layer {
                
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI
   &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E &kp I &kp O
   &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH
           &kp TAB &lt 1 ESC &kp SPACE &kp LSHIFT &lt 2 ENTER &kp BSPC                                                                                          
           >;
                };

                lower_layer {

                        bindings = < 
   
   &none    &none   &kp N6   &kp LT    &kp LBKT    &kp RBKT   &kp GT    &kp N5     &none    &kp PIPE
   &kp N7    &kp N8   &kp N9   &kp N0    &kp LPAR    &kp RPAR   &kp N1    &kp N2     &kp N3    &kp N4
   &none    &none   &none   &kp TILDE &kp LBRC    &kp RBRC   &none    &none     &none    &kp BSLH
                      &none   &none    &none      &kp LSHIFT    &kp DQT   &kp GRAVE  
                    >;
                };
                
                raise_layer {

                        bindings = <
   &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_NXT  &kp C_AC_CUT   &kp C_BRI_UP   &kp UP    &kp C_PP  &kp C_MUTE
   &bt BT_CLR     &bootloader   &reset        &kp CAPS      &kp C_AC_COPY &kp C_AC_PASTE &kp LEFT &kp DOWN  &kp RIGHT &kp C_VOL_UP
   &none         &none        &none        &none        &none        &none         &kp C_BRI_DN   &none    &none    &kp C_VOL_DN
                                &none        &none        &none        &none         &none   &kp DEL
                        >;
                };    
        };
};
